////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was generated by a tool.
////     Runtime Version:4.0.30319.0
////
////     Changes to this file may cause incorrect behavior and will be lost if
////     the code is regenerated.
//// </auto-generated>
////------------------------------------------------------------------------------

//// The file was created by AsyncCodeGenerator.
//// https://github.com/Ne4to/AsyncCodeGenerator
//// Source assembly: Microsoft.Lync.Model, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c
//namespace Assistant
//{
    
    
//    [System.Diagnostics.DebuggerStepThroughAttribute()]
//    internal static class AsyncExtensions
//    {
        
//        /// <summary>
//        /// Accepts a pending control request.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task AcceptControlRequestAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginAcceptControlRequest, source.EndAcceptControlRequest, null);
//        }
        
//        /// <summary>
//        /// Declines a pending control request.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task DeclineControlRequestAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginDeclineControlRequest, source.EndDeclineControlRequest, null);
//        }
        
//        /// <summary>
//        /// Grants control of the shared resource.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task GrantControlAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginGrantControl, source.EndGrantControl, null);
//        }
        
//        /// <summary>
//        /// Releases control of the shared resource.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ReleaseControlAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginReleaseControl, source.EndReleaseControl, null);
//        }
        
//        /// <summary>
//        /// Requests control of the shared resource.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RequestControlAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRequestControl, source.EndRequestControl, null);
//        }
        
//        /// <summary>
//        /// Revokes control of the shared resource.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RevokeControlAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRevokeControl, source.EndRevokeControl, null);
//        }
        
//        /// <summary>
//        /// Connects the modality, if not connected already, and starts sharing the desktop.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ShareDesktopAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginShareDesktop, source.EndShareDesktop, null);
//        }
        
//        /// <summary>
//        /// Connects the modality, if not connected already, and starts sharing the given resources.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ShareResourcesAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source, Microsoft.Lync.Model.Conversation.Sharing.SharingResourceList resources)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginShareResources, source.EndShareResources, resources, null);
//        }
        
//        /// <summary>
//        /// Starts sharing resources with the given a list of resources.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ShareResourcesAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source, System.Collections.Generic.IList<Microsoft.Lync.Model.Conversation.Sharing.SharingResource> resourceList)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginShareResources, source.EndShareResources, resourceList, null);
//        }
        
//        /// <summary>
//        /// Starts sharing resources with the given a resource.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ShareResourcesAsync(this Microsoft.Lync.Model.Conversation.Sharing.ApplicationSharingModality source, Microsoft.Lync.Model.Conversation.Sharing.SharingResource resource)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginShareResources, source.EndShareResources, resource, null);
//        }
        
//        /// <summary>
//        /// Sends DTMF tones.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SendDtmfAsync(this Microsoft.Lync.Model.Conversation.AudioVideo.AudioChannel source, string tones)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSendDtmf, source.EndSendDtmf, tones, null);
//        }
        
//        /// <summary>
//        /// Launches a Lync Meet Now conversation window using the specified modalities.
//        /// The new conversation window is obtained in the System.AsyncCallback method you pass in the callback argument.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow> MeetNowAsync(this Microsoft.Lync.Model.Extensibility.Automation source, System.IntPtr parentHWND)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow>.Factory.FromAsync(source.BeginMeetNow, source.EndMeetNow, parentHWND, null);
//        }
        
//        /// <summary>
//        /// Launches a Lync Meet Now conversation window using the specified modalities.
//        /// The new conversation window is obtained in the System.AsyncCallback method you pass in the callback argument.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow> MeetNowAsync(this Microsoft.Lync.Model.Extensibility.Automation source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow>.Factory.FromAsync(source.BeginMeetNow, source.EndMeetNow, null);
//        }
        
//        /// <summary>
//        /// Creates and initializes collaboration window to join a conference asynchronously.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow> StartConversationAsync(this Microsoft.Lync.Model.Extensibility.Automation source, string conferenceUrl, int parentHWND)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow>.Factory.FromAsync(source.BeginStartConversation, source.EndStartConversation, conferenceUrl, parentHWND, null);
//        }
        
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow> StartConversationAsync(this Microsoft.Lync.Model.Extensibility.Automation source, Microsoft.Lync.Model.Extensibility.AutomationModalities conversationModes, System.Collections.Generic.IEnumerable<string> participantUris, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.Lync.Model.Extensibility.AutomationModalitySettings, object>> contextData)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Extensibility.ConversationWindow>.Factory.FromAsync(source.BeginStartConversation, source.EndStartConversation, conversationModes, participantUris, contextData, null);
//        }
        
//        /// <summary>
//        /// Pause the channel.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task PauseAsync(this Microsoft.Lync.Model.Conversation.AudioVideo.Channel source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginPause, source.EndPause, null);
//        }
        
//        /// <summary>
//        /// Resume the channel.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ResumeAsync(this Microsoft.Lync.Model.Conversation.AudioVideo.Channel source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginResume, source.EndResume, null);
//        }
        
//        /// <summary>
//        /// Start the audio or video channel.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task StartAsync(this Microsoft.Lync.Model.Conversation.AudioVideo.Channel source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginStart, source.EndStart, null);
//        }
        
//        /// <summary>
//        /// Stop the audio or video channel.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task StopAsync(this Microsoft.Lync.Model.Conversation.AudioVideo.Channel source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginStop, source.EndStop, null);
//        }
        
//        /// <summary>
//        /// Sets a setting associated with this contact.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ChangeSettingAsync(this Microsoft.Lync.Model.Contact source, Microsoft.Lync.Model.ContactSetting contactSettingType, object contactSettingValue)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginChangeSetting, source.EndChangeSetting, contactSettingType, contactSettingValue, null);
//        }
        
//        /// <summary>
//        /// Gets the Organization Info of this contact.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static async System.Threading.Tasks.Task<ContactGetOrganizationInformationResult> GetOrganizationInformationAsync(this Microsoft.Lync.Model.Contact source, Microsoft.Lync.Model.OrganizationStructureTypes orgInfoTypes)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            Microsoft.Lync.Model.Group.ContactCollection managersTmp = default(Microsoft.Lync.Model.Group.ContactCollection);
//            Microsoft.Lync.Model.Group.ContactCollection peersTmp = default(Microsoft.Lync.Model.Group.ContactCollection);
//            Microsoft.Lync.Model.Group.ContactCollection directorsTmp = default(Microsoft.Lync.Model.Group.ContactCollection);
//            await System.Threading.Tasks.Task.Factory.FromAsync(source.BeginGetOrganizationInformation(orgInfoTypes, null, null), ar => source.EndGetOrganizationInformation(out managersTmp, out peersTmp, out directorsTmp, ar)).ConfigureAwait(false);
//            ContactGetOrganizationInformationResult result = new ContactGetOrganizationInformationResult();
//            result.managers = managersTmp;
//            result.peers = peersTmp;
//            result.directors = directorsTmp;
//            return result;
//        }
        
//        /// <summary>
//        /// Moves this contact from a source group to a target group.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task MoveToGroupAsync(this Microsoft.Lync.Model.Contact source, Microsoft.Lync.Model.Group.Group targetGroup, Microsoft.Lync.Model.Group.Group sourceGroup)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginMoveToGroup, source.EndMoveToGroup, targetGroup, sourceGroup, null);
//        }
        
//        /// <summary>
//        /// Adds a new custom group to the group list.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task AddGroupAsync(this Microsoft.Lync.Model.ContactManager source, string customGroupName)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginAddGroup, source.EndAddGroup, customGroupName, null);
//        }
        
//        /// <summary>
//        /// Adds a distribution group to the group list.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task AddGroupAsync(this Microsoft.Lync.Model.ContactManager source, Microsoft.Lync.Model.Group.DistributionGroup distributionGroup)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginAddGroup, source.EndAddGroup, distributionGroup, null);
//        }
        
//        /// <summary>
//        /// Looks up a contact or a distribution group by entryid, sip address, email address, display name, etc..
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<object> LookupAsync(this Microsoft.Lync.Model.ContactManager source, string lookupString)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<object>.Factory.FromAsync(source.BeginLookup, source.EndLookup, lookupString, null);
//        }
        
//        /// <summary>
//        /// Removes a contact from all groups except distribution groups.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RemoveContactFromAllGroupsAsync(this Microsoft.Lync.Model.ContactManager source, Microsoft.Lync.Model.Contact contact)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRemoveContactFromAllGroups, source.EndRemoveContactFromAllGroups, contact, null);
//        }
        
//        /// <summary>
//        /// Removes a group from the group list.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RemoveGroupAsync(this Microsoft.Lync.Model.ContactManager source, Microsoft.Lync.Model.Group.Group group)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRemoveGroup, source.EndRemoveGroup, group, null);
//        }
        
//        /// <summary>
//        /// Searches for contacts and distribution groups that match the given search criteria.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.SearchResults> SearchAsync(this Microsoft.Lync.Model.ContactManager source, string searchString, Microsoft.Lync.Model.SearchProviders providers, Microsoft.Lync.Model.SearchFields searchFields, Microsoft.Lync.Model.SearchOptions searchOptions, uint maxResults)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.SearchResults>.Factory.FromAsync(source.BeginSearch(searchString, providers, searchFields, searchOptions, maxResults, null, null), source.EndSearch);
//        }
        
//        /// <summary>
//        /// Begins to search for contacts or distribution groups matching a specified search string. Results of the search
//        /// are returned in the System.AsyncCallback you pass in the contactsAndGroupsCallback argument.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.SearchResults> SearchAsync(this Microsoft.Lync.Model.ContactManager source, string searchString)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.SearchResults>.Factory.FromAsync(source.BeginSearch, source.EndSearch, searchString, null);
//        }
        
//        /// <summary>
//        /// Creates a content object of the given type with the given title
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.Sharing.ShareableContent> CreateContentAsync(this Microsoft.Lync.Model.Conversation.Sharing.ContentSharingModality source, Microsoft.Lync.Model.Conversation.Sharing.ShareableContentType contentType, string title)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.Sharing.ShareableContent>.Factory.FromAsync(source.BeginCreateContent, source.EndCreateContent, contentType, title, null);
//        }
        
//        /// <summary>
//        /// Creates a content object of the given type with the given title and file name.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.Sharing.ShareableContent> CreateContentFromFileAsync(this Microsoft.Lync.Model.Conversation.Sharing.ContentSharingModality source, Microsoft.Lync.Model.Conversation.Sharing.ShareableContentType contentType, string title, string fileName, bool includeNativeFile)
//        {
//            //if ((source == null))
//            //{
//            //    throw new System.ArgumentNullException("source");
//            //}
//            //return System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.Sharing.ShareableContent>.Factory.FromAsync(source.BeginCreateContentFromFile(contentType, title, fileName, includeNativeFile, null, null), source.EndCreateContentFromFile);
//        }
        
//        /// <summary>
//        /// Used to admit a set of participants into conference.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task AdmitParticipantsAsync(this Microsoft.Lync.Model.Conversation.Conversation source, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Conversation.Participant> participants)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginAdmitParticipants, source.EndAdmitParticipants, participants, null);
//        }
        
//        /// <summary>
//        /// Used to Deny a set of participants access into a conference.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task DenyParticipantsAsync(this Microsoft.Lync.Model.Conversation.Conversation source, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Conversation.Participant> participants)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginDenyParticipants, source.EndDenyParticipants, participants, null);
//        }
        
//        /// <summary>
//        /// Merges another conversation into this one.modalityTypes specifies what modalities to be merged in.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task MergeAsync(this Microsoft.Lync.Model.Conversation.Conversation source, Microsoft.Lync.Model.Conversation.Conversation conversation, Microsoft.Lync.Model.Conversation.ModalityTypes modalityTypes)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginMerge, source.EndMerge, conversation, modalityTypes, null);
//        }
        
//        /// <summary>
//        /// Used to mute a set of participants in a conference.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task MuteParticipantsAsync(this Microsoft.Lync.Model.Conversation.Conversation source, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Conversation.Participant> participants)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginMuteParticipants, source.EndMuteParticipants, participants, null);
//        }
        
//        /// <summary>
//        /// Parks voice at the Call Park Server and terminates all other modalities.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ParkAsync(this Microsoft.Lync.Model.Conversation.Conversation source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginPark, source.EndPark, null);
//        }
        
//        /// <summary>
//        /// This is used to send application context type and data to the conversation. The application Id has to be registered on the caller side. The context data will be sent in raw foramts
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SendContextDataAsync(this Microsoft.Lync.Model.Conversation.Conversation source, string applicationId, string dataType, string data)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSendContextData, source.EndSendContextData, applicationId, dataType, data, null);
//        }
        
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SendInitialContextAsync(this Microsoft.Lync.Model.Conversation.Conversation source, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.Lync.Model.Conversation.ContextType, object>> contextData)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSendInitialContext, source.EndSendInitialContext, contextData, null);
//        }
        
//        /// <summary>
//        /// Sets a property associated with this conversation. This is an asynchronous operation, hence the conversationCallback, if specified, will be called back.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.ConversationProperty> SetPropertyAsync(this Microsoft.Lync.Model.Conversation.Conversation source, Microsoft.Lync.Model.Conversation.ConversationProperty propertyType, object propertyValue)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.ConversationProperty>.Factory.FromAsync(source.BeginSetProperty, source.EndSetProperty, propertyType, propertyValue, null);
//        }
        
//        /// <summary>
//        /// Used to unmute a set of participants in a conference.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task UnmuteParticipantsAsync(this Microsoft.Lync.Model.Conversation.Conversation source, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Conversation.Participant> participants)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginUnmuteParticipants, source.EndUnmuteParticipants, participants, null);
//        }
        
//        /// <summary>
//        /// Show the extensibility window for a registered application.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task OpenExtensibilityWindowAsync(this Microsoft.Lync.Model.Extensibility.ConversationWindow source, string applicationId)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginOpenExtensibilityWindow, source.EndOpenExtensibilityWindow, applicationId, null);
//        }
        
//        /// <summary>
//        /// Renames the custom group.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RenameAsync(this Microsoft.Lync.Model.Group.CustomGroup source, string newName)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRename, source.EndRename, newName, null);
//        }
        
//        /// <summary>
//        /// Plays audio file.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task PlayAudioFileAsync(this Microsoft.Lync.Model.Device.DeviceManager source, string audioFileName, Microsoft.Lync.Model.Device.AudioPlayBackModes playbackDevices, bool loop)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginPlayAudioFile, source.EndPlayAudioFile, audioFileName, playbackDevices, loop, null);
//        }
        
//        /// <summary>
//        /// Expands a distribution group.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ExpandAsync(this Microsoft.Lync.Model.Group.DistributionGroup source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginExpand, source.EndExpand, null);
//        }
        
//        /// <summary>
//        /// Gets all group members.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Group.ContactCollection> GetAllMembersAsync(this Microsoft.Lync.Model.Group.DistributionGroup source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Group.ContactCollection>.Factory.FromAsync(source.BeginGetAllMembers, source.EndGetAllMembers, null);
//        }
        
//        /// <summary>
//        /// Gets the owner of a group.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Contact> GetOwnerAsync(this Microsoft.Lync.Model.Group.DistributionGroup source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Contact>.Factory.FromAsync(source.BeginGetOwner, source.EndGetOwner, null);
//        }
        
//        /// <summary>
//        /// Adds a new contact to the group.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task AddContactAsync(this Microsoft.Lync.Model.Group.Group source, Microsoft.Lync.Model.Contact contact)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginAddContact, source.EndAddContact, contact, null);
//        }
        
//        /// <summary>
//        /// Removes a contact from the group.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RemoveContactAsync(this Microsoft.Lync.Model.Group.Group source, Microsoft.Lync.Model.Contact pContact)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRemoveContact, source.EndRemoveContact, pContact, null);
//        }
        
//        /// <summary>
//        /// Sends a plain text message to a remote conversation participant.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SendMessageAsync(this Microsoft.Lync.Model.Conversation.InstantMessageModality source, string text)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSendMessage, source.EndSendMessage, text, null);
//        }
        
//        /// <summary>
//        /// Sends a text message formatted for specified content type to a remote conversation participant.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SendMessageAsync(this Microsoft.Lync.Model.Conversation.InstantMessageModality source, System.Collections.Generic.IDictionary<Microsoft.Lync.Model.Conversation.InstantMessageContentType, string> contents)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSendMessage, source.EndSendMessage, contents, null);
//        }
        
//        /// <summary>
//        /// Sets the local composing state. The composing flag indicates that the local participant is typing a message.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SetComposingAsync(this Microsoft.Lync.Model.Conversation.InstantMessageModality source, bool isComposing)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSetComposing, source.EndSetComposing, isComposing, null);
//        }
        
//        /// <summary>
//        /// Initializes LyncClient when the Lync is in Suppressed Mode. You do not
//        /// call this method when Lync is not suppressed.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task InitializeAsync(this Microsoft.Lync.Model.LyncClient source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginInitialize, source.EndInitialize, null);
//        }
        
//        /// <summary>
//        /// Starts the collaboration platform shutdown process.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ShutdownAsync(this Microsoft.Lync.Model.LyncClient source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginShutdown, source.EndShutdown, null);
//        }
        
//        /// <summary>
//        /// Starts the uc Client sign in process with a specific availability.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SignInAsync(this Microsoft.Lync.Model.LyncClient source, string userUri, string domainAndUsername, string password)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSignIn, source.EndSignIn, userUri, domainAndUsername, password, null);
//        }
        
//        /// <summary>
//        /// Starts the uc Client sign out process.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SignOutAsync(this Microsoft.Lync.Model.LyncClient source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSignOut, source.EndSignOut, null);
//        }
        
//        /// <summary>
//        /// Activates a conversation modality by connecting the modality to its associated local and remote endpoints.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ConnectAsync(this Microsoft.Lync.Model.Conversation.Modality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginConnect, source.EndConnect, null);
//        }
        
//        /// <summary>
//        /// Transfers a connected modality to an existing conversation.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static async System.Threading.Tasks.Task<ModalityConsultativeTransferResult> ConsultativeTransferAsync(this Microsoft.Lync.Model.Conversation.Modality source, Microsoft.Lync.Model.Conversation.Conversation conversation, Microsoft.Lync.Model.Conversation.AudioVideo.TransferOptions options)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            Microsoft.Lync.Model.Conversation.ModalityState targetStateTmp = default(Microsoft.Lync.Model.Conversation.ModalityState);
//            System.Collections.Generic.IList<string> contextPropertiesTmp = default(System.Collections.Generic.IList<string>);
//            await System.Threading.Tasks.Task.Factory.FromAsync(source.BeginConsultativeTransfer(conversation, options, null, null), ar => source.EndConsultativeTransfer(out targetStateTmp, out contextPropertiesTmp, ar)).ConfigureAwait(false);
//            ModalityConsultativeTransferResult result = new ModalityConsultativeTransferResult();
//            result.targetState = targetStateTmp;
//            result.contextProperties = contextPropertiesTmp;
//            return result;
//        }
        
//        /// <summary>
//        /// Disconnects from the modality.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task DisconnectAsync(this Microsoft.Lync.Model.Conversation.Modality source, Microsoft.Lync.Model.Conversation.ModalityDisconnectReason reason)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginDisconnect, source.EndDisconnect, reason, null);
//        }
        
//        /// <summary>
//        /// Forwards an active conversation (in ringing state) to a specified remote contact endpoint.
//        /// You cannot forward conversations between the local contacts endpoints.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        /// <remarks>
//        /// Available only for the AvModality.
//        /// </remarks>
//        public static System.Threading.Tasks.Task ForwardAsync(this Microsoft.Lync.Model.Conversation.Modality source, Microsoft.Lync.Model.Contact contact)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginForward, source.EndForward, contact, null);
//        }
        
//        /// <summary>
//        /// Forwards an active conversation to a specified remote contact endpoint. You cannot forward
//        /// conversations between the local contacts endpoints.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        /// <remarks>
//        /// Available only for the AvModality.
//        /// </remarks>
//        public static System.Threading.Tasks.Task ForwardAsync(this Microsoft.Lync.Model.Conversation.Modality source, Microsoft.Lync.Model.ContactEndpoint endpoint)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginForward, source.EndForward, endpoint, null);
//        }
        
//        /// <summary>
//        /// Places the modality on hold.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task HoldAsync(this Microsoft.Lync.Model.Conversation.Modality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginHold, source.EndHold, null);
//        }
        
//        /// <summary>
//        /// Retrives a held modality.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RetrieveAsync(this Microsoft.Lync.Model.Conversation.Modality source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRetrieve, source.EndRetrieve, null);
//        }
        
//        /// <summary>
//        /// Sets a property associated with this modality.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.ModalityProperty> SetPropertyAsync(this Microsoft.Lync.Model.Conversation.Modality source, Microsoft.Lync.Model.Conversation.ModalityProperty propertyType, object propertyValue)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.ModalityProperty>.Factory.FromAsync(source.BeginSetProperty, source.EndSetProperty, propertyType, propertyValue, null);
//        }
        
//        /// <summary>
//        /// Transfers an active conversation to a specified remote contact.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        /// <remarks>
//        /// Available only for the AvModality.
//        /// </remarks>
//        public static async System.Threading.Tasks.Task<ModalityTransferResult> TransferAsync(this Microsoft.Lync.Model.Conversation.Modality source, Microsoft.Lync.Model.Contact contact, Microsoft.Lync.Model.Conversation.AudioVideo.TransferOptions options)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            Microsoft.Lync.Model.Conversation.ModalityState targetStateTmp = default(Microsoft.Lync.Model.Conversation.ModalityState);
//            System.Collections.Generic.IList<string> contextPropertiesTmp = default(System.Collections.Generic.IList<string>);
//            await System.Threading.Tasks.Task.Factory.FromAsync(source.BeginTransfer(contact, options, null, null), ar => source.EndTransfer(out targetStateTmp, out contextPropertiesTmp, ar)).ConfigureAwait(false);
//            ModalityTransferResult result = new ModalityTransferResult();
//            result.targetState = targetStateTmp;
//            result.contextProperties = contextPropertiesTmp;
//            return result;
//        }
        
//        /// <summary>
//        /// Transfer an active conversation to a specified remote contact endpoint. You cannot transfer
//        /// a conversation to another local contact endpoint.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        /// <remarks>
//        /// Available only for the AvModality.
//        /// </remarks>
//        public static async System.Threading.Tasks.Task<ModalityTransferResult> TransferAsync(this Microsoft.Lync.Model.Conversation.Modality source, Microsoft.Lync.Model.ContactEndpoint endpoint, Microsoft.Lync.Model.Conversation.AudioVideo.TransferOptions options)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            Microsoft.Lync.Model.Conversation.ModalityState targetStateTmp = default(Microsoft.Lync.Model.Conversation.ModalityState);
//            System.Collections.Generic.IList<string> contextPropertiesTmp = default(System.Collections.Generic.IList<string>);
//            await System.Threading.Tasks.Task.Factory.FromAsync(source.BeginTransfer(endpoint, options, null, null), ar => source.EndTransfer(out targetStateTmp, out contextPropertiesTmp, ar)).ConfigureAwait(false);
//            ModalityTransferResult result = new ModalityTransferResult();
//            result.targetState = targetStateTmp;
//            result.contextProperties = contextPropertiesTmp;
//            return result;
//        }
        
//        /// <summary>
//        /// Admits the participant to the conference.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task AdmitAsync(this Microsoft.Lync.Model.Conversation.Participant source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginAdmit, source.EndAdmit, null);
//        }
        
//        /// <summary>
//        /// Denies the participant access to the conference and removes him from the lobby.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task DenyAsync(this Microsoft.Lync.Model.Conversation.Participant source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginDeny, source.EndDeny, null);
//        }
        
//        /// <summary>
//        /// Asynchronously locks the participants video
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task LockVideoAsync(this Microsoft.Lync.Model.Conversation.Participant source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginLockVideo, source.EndLockVideo, null);
//        }
        
//        /// <summary>
//        /// Asynchronously pins the participant video
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task PinVideoAsync(this Microsoft.Lync.Model.Conversation.Participant source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginPinVideo, source.EndPinVideo, null);
//        }
        
//        /// <summary>
//        /// Sets the mute state.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SetMuteAsync(this Microsoft.Lync.Model.Conversation.Participant source, bool mute)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSetMute, source.EndSetMute, mute, null);
//        }
        
//        /// <summary>
//        /// Sets a property associated with this participant.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.ParticipantProperty> SetPropertyAsync(this Microsoft.Lync.Model.Conversation.Participant source, Microsoft.Lync.Model.Conversation.ParticipantProperty propertyType, object propertyValue)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Conversation.ParticipantProperty>.Factory.FromAsync(source.BeginSetProperty, source.EndSetProperty, propertyType, propertyValue, null);
//        }
        
//        /// <summary>
//        /// Asynchronously unlocks the participants video
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task UnLockVideoAsync(this Microsoft.Lync.Model.Conversation.Participant source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginUnLockVideo, source.EndUnLockVideo, null);
//        }
        
//        /// <summary>
//        /// Asynchronously unpins the participant video
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task UnPinVideoAsync(this Microsoft.Lync.Model.Conversation.Participant source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginUnPinVideo, source.EndUnPinVideo, null);
//        }
        
//        /// <summary>
//        /// Join this room
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task JoinAsync(this Microsoft.Lync.Model.Room.Room source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginJoin, source.EndJoin, null);
//        }
        
//        /// <summary>
//        /// Leave this room.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task LeaveAsync(this Microsoft.Lync.Model.Room.Room source)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginLeave, source.EndLeave, null);
//        }
        
//        /// <summary>
//        /// Retrieve additional messages
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Lync.Model.Room.RoomMessage>> RetrieveAdditionalMessagesAsync(this Microsoft.Lync.Model.Room.Room source, uint lastMessageID, uint count)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Lync.Model.Room.RoomMessage>>.Factory.FromAsync(source.BeginRetrieveAdditionalMessages, source.EndRetrieveAdditionalMessages, lastMessageID, count, null);
//        }
        
//        /// <summary>
//        /// Retrieve latest messages from a room
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Lync.Model.Room.RoomMessage>> RetrieveLatestMessagesAsync(this Microsoft.Lync.Model.Room.Room source, uint count)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Lync.Model.Room.RoomMessage>>.Factory.FromAsync(source.BeginRetrieveLatestMessages, source.EndRetrieveLatestMessages, count, null);
//        }
        
//        /// <summary>
//        /// Sends a plain text message to this room.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage> SendMessageAsync(this Microsoft.Lync.Model.Room.Room source, string text, Microsoft.Lync.Model.Room.RoomMessageType type)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage>.Factory.FromAsync(source.BeginSendMessage, source.EndSendMessage, text, type, null);
//        }
        
//        /// <summary>
//        /// Sends a message in different formats to this room.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage> SendMessageAsync(this Microsoft.Lync.Model.Room.Room source, System.Collections.Generic.IDictionary<Microsoft.Lync.Model.Room.RoomMessageFormat, string> contents, Microsoft.Lync.Model.Room.RoomMessageType type)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage>.Factory.FromAsync(source.BeginSendMessage, source.EndSendMessage, contents, type, null);
//        }
        
//        /// <summary>
//        /// Sends a story message in plain text to this room.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage> SendStoryMessageAsync(this Microsoft.Lync.Model.Room.Room source, string text, Microsoft.Lync.Model.Room.RoomMessageType type, string storyTitle)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage>.Factory.FromAsync(source.BeginSendStoryMessage, source.EndSendStoryMessage, text, type, storyTitle, null);
//        }
        
//        /// <summary>
//        /// Sends a story message in different formats to this room.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage> SendStoryMessageAsync(this Microsoft.Lync.Model.Room.Room source, System.Collections.Generic.IDictionary<Microsoft.Lync.Model.Room.RoomMessageFormat, string> contents, Microsoft.Lync.Model.Room.RoomMessageType type, string storyTitle)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.RoomMessage>.Factory.FromAsync(source.BeginSendStoryMessage, source.EndSendStoryMessage, contents, type, storyTitle, null);
//        }
        
//        /// <summary>
//        /// Query a room by its URI.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.Room> QueryRoomByUriAsync(this Microsoft.Lync.Model.Room.RoomManager source, string roomUri)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<Microsoft.Lync.Model.Room.Room>.Factory.FromAsync(source.BeginQueryRoomByUri, source.EndQueryRoomByUri, roomUri, null);
//        }
        
//        /// <summary>
//        /// Query room(s)
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Lync.Model.Room.Room>> QueryRoomsAsync(this Microsoft.Lync.Model.Room.RoomManager source, string keyword, Microsoft.Lync.Model.Room.RoomSearchModeType searchType)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Lync.Model.Room.Room>>.Factory.FromAsync(source.BeginQueryRooms, source.EndQueryRooms, keyword, searchType, null);
//        }
        
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task PublishContactInformationAsync(this Microsoft.Lync.Model.Self source, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.Lync.Model.PublishableContactInformationType, object>> items)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginPublishContactInformation, source.EndPublishContactInformation, items, null);
//        }
        
//        /// <summary>
//        /// Removes the phone.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task RemovePhoneAsync(this Microsoft.Lync.Model.Self source, Microsoft.Lync.Model.ContactEndpointType phoneType)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginRemovePhone, source.EndRemovePhone, phoneType, null);
//        }
        
//        /// <summary>
//        /// Add the phone if not exist, update if exist.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task SetPhoneAsync(this Microsoft.Lync.Model.Self source, Microsoft.Lync.Model.ContactEndpointType phoneType, string phoneUri, bool toBePublished)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginSetPhone, source.EndSetPhone, phoneType, phoneUri, toBePublished, null);
//        }
        
//        /// <summary>
//        /// Download the content file
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task<string> DownloadFileAsync(this Microsoft.Lync.Model.Conversation.Sharing.ShareableContent source, string localPath)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task<string>.Factory.FromAsync(source.BeginDownloadFile, source.EndDownloadFile, localPath, null);
//        }
        
//        /// <summary>
//        /// Add the contact into external provider contacts
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task AddToExternalContactsAsync(this Microsoft.Lync.Model.Utilities source, Microsoft.Lync.Model.Contact contactContext)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginAddToExternalContacts, source.EndAddToExternalContacts, contactContext, null);
//        }
        
//        /// <summary>
//        /// Launches a new Outlook message window pre-populated with the contact email address and subject string passed
//        /// in the first two arguments of this method.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ComposeEmailAsync(this Microsoft.Lync.Model.Utilities source, Microsoft.Lync.Model.Contact to, string subject)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginComposeEmail, source.EndComposeEmail, to, subject, null);
//        }
        
//        /// <summary>
//        /// Launches a new Outlook message window pre-populated with the specified distribution group and subject string passed
//        /// in the first two arguments of this method.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ComposeEmailAsync(this Microsoft.Lync.Model.Utilities source, Microsoft.Lync.Model.Group.DistributionGroup to, string subject)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginComposeEmail, source.EndComposeEmail, to, subject, null);
//        }
        
//        /// <summary>
//        /// Launches a new Outlook message window pre-populated with the email addresses in the specified contact list and subject string passed
//        /// in the first two arguments of this method.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ComposeEmailAsync(this Microsoft.Lync.Model.Utilities source, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Contact> toContacts, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Group.DistributionGroup> toDGs, string subject)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginComposeEmail, source.EndComposeEmail, toContacts, toDGs, subject, null);
//        }
        
//        /// <summary>
//        /// Launches a new Outlook Meeting window pre-populated with the email address of the specified contact and meeting subject string passed
//        /// in the first two arguments of this method.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ScheduleMeetingAsync(this Microsoft.Lync.Model.Utilities source, Microsoft.Lync.Model.Contact to, string subject)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginScheduleMeeting, source.EndScheduleMeeting, to, subject, null);
//        }
        
//        /// <summary>
//        /// Launches a new Outlook Meeting window pre-populated with the specified distribution group and meeting subject string passed
//        /// in the first two arguments of this method.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ScheduleMeetingAsync(this Microsoft.Lync.Model.Utilities source, Microsoft.Lync.Model.Group.DistributionGroup to, string subject)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginScheduleMeeting, source.EndScheduleMeeting, to, subject, null);
//        }
        
//        /// <summary>
//        /// Launches a new Outlook Meeting window pre-populated with the email addresses in the specified contact list and meeting subject string passed
//        /// in the first two arguments of this method.
//        /// </summary>
//        /// <param name="source">
//        /// The source object
//        /// </param>
//        public static System.Threading.Tasks.Task ScheduleMeetingAsync(this Microsoft.Lync.Model.Utilities source, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Contact> toContacts, System.Collections.Generic.IEnumerable<Microsoft.Lync.Model.Group.DistributionGroup> toDGs, string subject)
//        {
//            if ((source == null))
//            {
//                throw new System.ArgumentNullException("source");
//            }
//            return System.Threading.Tasks.Task.Factory.FromAsync(source.BeginScheduleMeeting, source.EndScheduleMeeting, toContacts, toDGs, subject, null);
//        }
//    }
    
//    public class ContactGetOrganizationInformationResult
//    {
        
//        public Microsoft.Lync.Model.Group.ContactCollection managers { get; set; }
        
//        public Microsoft.Lync.Model.Group.ContactCollection peers { get; set; }
        
//        public Microsoft.Lync.Model.Group.ContactCollection directors { get; set; }
//    }
    
//    public class ModalityConsultativeTransferResult
//    {
        
//        public Microsoft.Lync.Model.Conversation.ModalityState targetState { get; set; }
        
//        public System.Collections.Generic.IList<string> contextProperties { get; set; }
//    }
    
//    public class ModalityTransferResult
//    {
        
//        public Microsoft.Lync.Model.Conversation.ModalityState targetState { get; set; }
        
//        public System.Collections.Generic.IList<string> contextProperties { get; set; }
//    }
//}
